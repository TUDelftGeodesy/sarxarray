{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SARXarray","text":"<p>SARXarray is an open-source Xarray extension for Synthetic Aperture Radar (SAR) data.</p> <p>SARXarray is especially designed to work with complex data, that is, containing both the phase and amplitude of the data. The extension can handle coregistered stacks of Single Look Complex (SLC) data, as well as derived products such as interferogram stacks. It utilizes Xarray\u2019s support on labeled multi-dimensional datasets to stress the space-time character of the image stacks. Dask Array is implemented to support parallel computation.</p> <p>SARXarry supports the following functionalities:</p> <ol> <li> <p>Chunk-wise reading/writing of coregistered SLC or interferogram stacks;</p> </li> <li> <p>Basic operations on complex data, e.g., averaging along axis and complex conjugate multiplication;</p> </li> <li> <p>Specific SAR data operations, e.g., multilooking and coherence estimation.</p> </li> </ol> <p>All the above functionalities can be scaled up to a Hyper-Performance Computation (HPC) system.</p>"},{"location":"setup/","title":"Installation","text":"<pre><code>pip install sarxarray\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<pre><code># List of path to binary SLC files\nlist_slcs = ['slc_1.raw', 'slc_2.raw', 'slc_3.raw']\n</code></pre> <pre><code># Known 2D shape (azimuth, range)\nshape = (10018, 68656)\n</code></pre>"},{"location":"usage/#loading-corregisterred-slc-stack","title":"Loading corregisterred SLC stack","text":"<p>Read corregisterred SLC stack using <code>from_binary</code>:</p> <pre><code>import sarxarray\n\nstack = sarxarray.from_binary(list_slcs, shape) \n</code></pre> <p>Manually specify chunk size:</p> <pre><code>stack_smallchunk = sarxarray.from_binary(list_slcs, shape, chunks=(2000, 2000))\n</code></pre>"},{"location":"usage/#common-processing-on-an-slc-stack","title":"Common processing on an SLC stack","text":"<p>Multi-look by a windowsize, e.g. 2 in azimuth dimension and 4 in range dimension.</p> <pre><code>stack_multilook = stack.slcstack.multi_look((2,4))\n</code></pre> <p>Compute coherence between two SLCs:</p> <pre><code>slc1 = stack.isel(time=[0]) # first image\nslc2 = stack.isel(time=[2])  # third image\nwindow = (4,4)\n\ncoherence = slc1.slcstack.complex_coherence(slc2, window)\n</code></pre>"},{"location":"usage/#make-a-mean-reflection-map-mrm-and-visualize","title":"Make a Mean-Reflection-Map (MRM) and visualize","text":"<pre><code># Get MRM\nmrm = stack_multilook.slcstack.mrm()\n\n# Visualize\nfrom matplotlib import pyplot as plt\nfig, ax = plt.subplots()\nax.imshow(mrm)\nmrm.plot(ax=ax, robust=True, cmap='gray')\n</code></pre>"},{"location":"usage/#access-and-manipulate-an-slc-stack-as-an-xarray","title":"Access and manipulate an SLC stack as an Xarray","text":"<p>Slice the SLC stack in 3D:</p> <pre><code>stack.isel(azimuth=range(1000,2000), range=range(1500,2500), time=range(2,5))\n</code></pre> <p>Select <code>amplitude</code> attributes</p> <pre><code>amp = stack['amplitude']\n</code></pre> <p>Compute stack and peresist in memory:</p> <pre><code>stack = stack.compute()\n</code></pre>"}]}